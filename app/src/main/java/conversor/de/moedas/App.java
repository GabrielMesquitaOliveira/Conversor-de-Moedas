/*
 * This source file was generated by the Gradle 'init' task
 */
package conversor.de.moedas;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Scanner;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Insira o código de uma moeda:");
        String code1 = scanner.nextLine();

        System.out.println("Insira a quantidade:");
        double ammount = scanner.nextDouble();

        // Descarta o '\n' restante no buffer
        scanner.nextLine();

        System.out.println("Insira o código de outra moeda para conversão:");
        String code2 = scanner.nextLine();

        try {
            var result = App.convert(code1, ammount, code2);
            App.processResponse(result);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

    }

    public static HttpResponse convert(String code1, Double Ammount, String code2) throws IOException, InterruptedException {
        // create a client
        HttpClient client = HttpClient.newHttpClient();

        // create URI
        URI uri = URI.create("https://v6.exchangerate-api.com/v6/1abd92f9a89db1bdf4728a63/pair/" + code1 + "/" + code2
                + "/" + Ammount);
        // create a request
        var request = HttpRequest.newBuilder(uri)
                .header("accept", "application/json")
                .build();

        // send the request
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response;

    }

    public static void processResponse(HttpResponse<String> response) throws IOException {
        String responseBody = response.body();

        // Jackson to process Json
        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode = mapper.readTree(responseBody);

        if (jsonNode.has("conversion_result")) {
            double conversionResult = jsonNode.get("conversion_result").asDouble();
            System.out.println("Resultado da conversão: " + conversionResult);
        } else {
            System.out.println("Erro ao obter o resultado da conversão.");
        }
    }

}
